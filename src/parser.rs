use crate::symbols::Symbols;
use unicode_segmentation::{Graphemes, UnicodeSegmentation};

struct Parser {
    source: String,
}

impl Parser {
    fn parse(&self) -> Vec<Symbols> {
        let iter = self.source.graphemes(true);
        let mut symbols: Vec<Symbols> = Vec::new();

        for x in iter {
            let symbol: Option<Symbols> = None;
            match x {
                "ðŸŸ¥" => Some(Symbols::RedSquare),
                "ðŸŸ§" => Some(Symbols::OrangeSquare),
                "ðŸŸ¨" => Some(Symbols::YellowSquare),
                "ðŸŸ©" => Some(Symbols::GreenSquare),
                "ðŸŸ¦" => Some(Symbols::BlueSquare),
                "ðŸŸª" => Some(Symbols::PurpleSquare),
                "ðŸŸ«" => Some(Symbols::BrownSquare),
                "â¬›" => Some(Symbols::BlackSquare),
                "â¬œ" => Some(Symbols::WhiteSquare),
                "ðŸ”´" => Some(Symbols::RedCircle),
                "ðŸŸ " => Some(Symbols::OrangeCircle),
                "ðŸŸ¡" => Some(Symbols::YellowCircle),
                "ðŸŸ¢" => Some(Symbols::GreenCircle),
                "ðŸ”µ" => Some(Symbols::BlueCircle),
                "ðŸŸ£" => Some(Symbols::PurpleCircle),
                "ðŸŸ¤" => Some(Symbols::BrownCircle),
                "âš«" => Some(Symbols::BlackCircle),
                "âšª" => Some(Symbols::WhiteCircle),
                _ => None,
            };

            if let Some(symbol) = symbol {
                symbols.push(symbol);
            } else {
                eprintln!("Unrecognized symbol: {x}!");
                break;
            }
        }

        symbols
    }
}
